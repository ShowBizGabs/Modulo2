Index: Card.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Card.java	(revision )
+++ Card.java	(revision )
@@ -0,0 +1,32 @@
+package com.example.grosales.mantenimiento;
+
+
+public class Card {
+    private long id;
+    private String name;
+    private int color_resource;
+
+    public long getId() {
+        return id;
+    }
+
+    public void setId(long id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public int getColorResource() {
+        return color_resource;
+    }
+
+    public void setColorResource(int color_resource) {
+        this.color_resource = color_resource;
+    }
+}
Index: SampleMaterialAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SampleMaterialAdapter.java	(revision )
+++ SampleMaterialAdapter.java	(revision )
@@ -0,0 +1,177 @@
+package com.example.grosales.mantenimiento;
+
+
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.support.v4.app.ActivityOptionsCompat;
+import android.support.v4.util.Pair;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.RecyclerView;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewAnimationUtils;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.TextView;
+
+import java.util.ArrayList;
+
+public class SampleMaterialAdapter extends RecyclerView.Adapter<SampleMaterialAdapter.ViewHolder> {
+    private static final String DEBUG_TAG = "SampleMaterialAdapter";
+
+    public Context context;
+    public ArrayList<Card> cardsList;
+
+    public SampleMaterialAdapter(Context context, ArrayList<Card> cardsList) {
+        this.context = context;
+        this.cardsList = cardsList;
+    }
+
+    @Override
+    public void onBindViewHolder(ViewHolder viewHolder, int position) {
+        String name = cardsList.get(position).getName();
+        int color = cardsList.get(position).getColorResource();
+        TextView initial = viewHolder.initial;
+        TextView nameTextView = viewHolder.name;
+        nameTextView.setText(name);
+        initial.setBackgroundColor(color);
+        initial.setText(Character.toString(name.charAt(0)));
+    }
+
+    @Override
+    public void onViewDetachedFromWindow(ViewHolder viewHolder) {
+        super.onViewDetachedFromWindow(viewHolder);
+        viewHolder.itemView.clearAnimation();
+    }
+
+    @Override
+    public void onViewAttachedToWindow(ViewHolder viewHolder) {
+        super.onViewAttachedToWindow(viewHolder);
+        animateCircularReveal(viewHolder.itemView);
+    }
+
+    public void animateCircularReveal(View view) {
+        int centerX = 0;
+        int centerY = 0;
+        int startRadius = 0;
+        int endRadius = Math.max(view.getWidth(), view.getHeight());
+        Animator animation = ViewAnimationUtils.createCircularReveal(view, centerX, centerY, startRadius, endRadius);
+        view.setVisibility(View.VISIBLE);
+        animation.start();
+    }
+
+    public void animateCircularDelete(final View view, final int list_position) {
+        int centerX = view.getWidth();
+        int centerY = view.getHeight();
+        int startRadius = view.getWidth();
+        int endRadius = 0;
+        Animator animation = ViewAnimationUtils.createCircularReveal(view, centerX, centerY, startRadius, endRadius);
+
+        animation.addListener(new AnimatorListenerAdapter() {
+            @Override
+            public void onAnimationEnd(Animator animation) {
+                super.onAnimationEnd(animation);
+
+                Log.d(DEBUG_TAG, "SampleMaterialAdapter onAnimationEnd for Edit adapter position " + list_position);
+                Log.d(DEBUG_TAG, "SampleMaterialAdapter onAnimationEnd for Edit cardId " + getItemId(list_position));
+
+                view.setVisibility(View.INVISIBLE);
+                cardsList.remove(list_position);
+                notifyItemRemoved(list_position);
+            }
+        });
+        animation.start();
+    }
+
+    public void addCard(String name, int color) {
+        Card card = new Card();
+        card.setName(name);
+        card.setColorResource(color);
+        card.setId(getItemCount());
+        cardsList.add(card);
+        ((SampleMaterialActivity) context).doSmoothScroll(getItemCount());
+        notifyItemInserted(getItemCount());
+    }
+
+    public void updateCard(String name, int list_position) {
+        cardsList.get(list_position).setName(name);
+        Log.d(DEBUG_TAG, "list_position is " + list_position);
+        notifyItemChanged(list_position);
+    }
+
+    public void deleteCard(View view, int list_position) {
+        animateCircularDelete(view, list_position);
+    }
+
+    @Override
+    public int getItemCount() {
+        if (cardsList.isEmpty()) {
+            return 0;
+        } else {
+            return cardsList.size();
+        }
+    }
+
+    @Override
+    public long getItemId(int position) {
+        return cardsList.get(position).getId();
+    }
+
+    @Override
+    public ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
+        LayoutInflater li = LayoutInflater.from(viewGroup.getContext());
+        View v = li.inflate(R.layout.card_view_holder, viewGroup, false);
+        return new ViewHolder(v);
+    }
+
+    public class ViewHolder extends RecyclerView.ViewHolder {
+        private TextView initial;
+        private TextView name;
+        private Button deleteButton;
+
+        public ViewHolder(View v) {
+            super(v);
+            initial = (TextView) v.findViewById(R.id.initial);
+            name = (TextView) v.findViewById(R.id.name);
+            deleteButton = (Button) v.findViewById(R.id.delete_button);
+
+            deleteButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    animateCircularDelete(itemView, getAdapterPosition());
+                }
+            });
+
+            itemView.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    Pair<View, String> p1 = Pair.create((View) initial, SampleMaterialActivity.TRANSITION_INITIAL);
+                    Pair<View, String> p2 = Pair.create((View) name, SampleMaterialActivity.TRANSITION_NAME);
+                    Pair<View, String> p3 = Pair.create((View) deleteButton, SampleMaterialActivity.TRANSITION_DELETE_BUTTON);
+
+                    ActivityOptionsCompat options;
+                    Activity act = (AppCompatActivity) context;
+                    options = ActivityOptionsCompat.makeSceneTransitionAnimation(act, p1, p2, p3);
+
+                    int requestCode = getAdapterPosition();
+                    String name = cardsList.get(requestCode).getName();
+                    int color = cardsList.get(requestCode).getColorResource();
+
+                    Log.d(DEBUG_TAG, "SampleMaterialAdapter itemView listener for Edit adapter position " + requestCode);
+
+                    Intent transitionIntent = new Intent(context, TransitionEditActivity.class);
+                    transitionIntent.putExtra(SampleMaterialActivity.EXTRA_NAME, name);
+                    transitionIntent.putExtra(SampleMaterialActivity.EXTRA_INITIAL, Character.toString(name.charAt(0)));
+                    transitionIntent.putExtra(SampleMaterialActivity.EXTRA_COLOR, color);
+                    transitionIntent.putExtra(SampleMaterialActivity.EXTRA_UPDATE, false);
+                    transitionIntent.putExtra(SampleMaterialActivity.EXTRA_DELETE, false);
+                    ((AppCompatActivity) context).startActivityForResult(transitionIntent, requestCode, options.toBundle());
+                }
+            });
+        }
+    }
+}
Index: SampleMaterialActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SampleMaterialActivity.java	(revision )
+++ SampleMaterialActivity.java	(revision )
@@ -0,0 +1,120 @@
+package com.example.grosales.mantenimiento;
+
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.design.widget.FloatingActionButton;
+import android.support.v4.app.ActivityOptionsCompat;
+import android.support.v4.util.Pair;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.util.Log;
+import android.view.View;
+
+import java.util.ArrayList;
+
+public class SampleMaterialActivity extends AppCompatActivity {
+    private static final String DEBUG_TAG = "AppCompatActivity";
+
+    public static final String EXTRA_UPDATE = "update";
+    public static final String EXTRA_DELETE = "delete";
+    public static final String EXTRA_NAME = "name";
+    public static final String EXTRA_COLOR = "color";
+    public static final String EXTRA_INITIAL = "initial";
+
+    public static final String TRANSITION_FAB = "fab_transition";
+    public static final String TRANSITION_INITIAL = "initial_transition";
+    public static final String TRANSITION_NAME = "name_transition";
+    public static final String TRANSITION_DELETE_BUTTON = "delete_button_transition";
+
+    private RecyclerView recyclerView;
+    private SampleMaterialAdapter adapter;
+    private ArrayList<Card> cardsList = new ArrayList<>();
+    private int[] colors;
+    private String[] names;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_sample_material);
+
+        names = getResources().getStringArray(R.array.names_array);
+        colors = getResources().getIntArray(R.array.initial_colors);
+
+        initCards();
+
+        if (adapter == null) {
+            adapter = new SampleMaterialAdapter(this, cardsList);
+        }
+        recyclerView = (RecyclerView) findViewById(R.id.recycler_view);
+        recyclerView.setAdapter(adapter);
+        recyclerView.setLayoutManager(new LinearLayoutManager(this));
+
+        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
+        fab.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Pair<View, String> pair = Pair.create(v.findViewById(R.id.fab), TRANSITION_FAB);
+
+                ActivityOptionsCompat options;
+                Activity act = SampleMaterialActivity.this;
+                options = ActivityOptionsCompat.makeSceneTransitionAnimation(act, pair);
+
+                Intent transitionIntent = new Intent(act, TransitionAddActivity.class);
+                act.startActivityForResult(transitionIntent, adapter.getItemCount(), options.toBundle());
+            }
+        });
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+
+        Log.d(DEBUG_TAG, "requestCode is " + requestCode);
+        // if adapter.getItemCount() is request code, that means we are adding a new position
+        // anything less than adapter.getItemCount() means we are editing a particular position
+        if (requestCode == adapter.getItemCount()) {
+            if (resultCode == RESULT_OK) {
+                // Make sure the Add request was successful
+                // if add name, insert name in list
+                String name = data.getStringExtra(EXTRA_NAME);
+                int color = data.getIntExtra(EXTRA_COLOR, 0);
+                adapter.addCard(name, color);
+            }
+        } else {
+            // Anything other than adapter.getItemCount() means editing a particular list item
+            // the requestCode is the list item position
+            if (resultCode == RESULT_OK) {
+                // Make sure the Update request was successful
+                RecyclerView.ViewHolder viewHolder = recyclerView.findViewHolderForAdapterPosition(requestCode);
+                if (data.getExtras().getBoolean(EXTRA_DELETE, false)) {
+                    // if delete user delete
+                    // The user deleted a contact
+                    adapter.deleteCard(viewHolder.itemView, requestCode);
+                } else if (data.getExtras().getBoolean(EXTRA_UPDATE)) {
+                    // if name changed, update user
+                    String name = data.getStringExtra(EXTRA_NAME);
+                    viewHolder.itemView.setVisibility(View.INVISIBLE);
+                    adapter.updateCard(name, requestCode);
+                }
+            }
+        }
+    }
+
+    public void doSmoothScroll(int position) {
+        recyclerView.smoothScrollToPosition(position);
+    }
+
+    private void initCards() {
+        for (int i = 0; i < 50; i++) {
+            Card card = new Card();
+            card.setId((long) i);
+            card.setName(names[i]);
+            card.setColorResource(colors[i]);
+            Log.d(DEBUG_TAG, "Card created with id " + card.getId() + ", name " + card.getName() + ", color " + card.getColorResource());
+            cardsList.add(card);
+        }
+    }
+}
Index: TransitionAddActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TransitionAddActivity.java	(revision )
+++ TransitionAddActivity.java	(revision )
@@ -0,0 +1,95 @@
+package com.example.grosales.mantenimiento;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
+import android.text.Editable;
+import android.text.TextUtils;
+import android.text.TextWatcher;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import java.util.Random;
+
+public class TransitionAddActivity extends AppCompatActivity {
+    private EditText nameEditText;
+    private TextView initialTextView;
+    private int color;
+    private Intent intent;
+    private Random randomGenerator = new Random();
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_transition_add);
+
+        nameEditText = (EditText) findViewById(R.id.name);
+        initialTextView = (TextView) findViewById(R.id.initial);
+        Button addButton = (Button) findViewById(R.id.add_button);
+
+        intent = getIntent();
+        int[] colors = getResources().getIntArray(R.array.initial_colors);
+        color = colors[randomGenerator.nextInt(50)];
+
+        initialTextView.setText("");
+        initialTextView.setBackgroundColor(color);
+
+        nameEditText.addTextChangedListener(new TextWatcher() {
+            @Override
+            public void onTextChanged(CharSequence s, int start, int before, int count) {
+                if (count == 0) {
+                    // add initialTextView
+                    initialTextView.setText("");
+                } else if (count == 1) {
+                    // initialTextView set to first letter of nameEditText and add name stringExtra
+                    initialTextView.setText(String.valueOf(s.charAt(0)));
+                }
+            }
+
+            @Override
+            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+            }
+
+            @Override
+            public void afterTextChanged(Editable s) {
+            }
+        });
+
+        addButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                // must not be zero otherwise do not finish activity and report Toast message
+                String text = initialTextView.getText().toString().trim();
+                if (TextUtils.isEmpty(text)) {
+                    Toast.makeText(getApplicationContext(), "Enter a valid name", Toast.LENGTH_SHORT).show();
+                } else {
+                    intent.putExtra(SampleMaterialActivity.EXTRA_NAME, String.valueOf(nameEditText.getText()));
+                    intent.putExtra(SampleMaterialActivity.EXTRA_INITIAL, String.valueOf(nameEditText.getText().charAt(0)));
+                    intent.putExtra(SampleMaterialActivity.EXTRA_COLOR, color);
+                    setResult(RESULT_OK, intent);
+                    supportFinishAfterTransition();
+                }
+            }
+        });
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle action bar item clicks here. The action bar will
+        // automatically handle clicks on the Home/Up button, so long
+        // as you specify a parent activity in AndroidManifest.xml.
+        int id = item.getItemId();
+
+        //noinspection SimplifiableIfStatement
+        if (id == android.R.id.home) {
+            super.onBackPressed();
+            return true;
+        }
+
+        return super.onOptionsItemSelected(item);
+    }
+}
Index: TransitionEditActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TransitionEditActivity.java	(revision )
+++ TransitionEditActivity.java	(revision )
@@ -0,0 +1,105 @@
+package com.example.grosales.mantenimiento;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
+import android.text.Editable;
+import android.text.TextUtils;
+import android.text.TextWatcher;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.TextView;
+import android.widget.Toast;
+
+public class TransitionEditActivity extends AppCompatActivity {
+    private EditText nameEditText;
+    private TextView initialTextView;
+    private Intent intent;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_transition_edit);
+
+        nameEditText = (EditText) findViewById(R.id.name);
+        initialTextView = (TextView) findViewById(R.id.initial);
+        Button update_button = (Button) findViewById(R.id.update_button);
+        Button delete_button = (Button) findViewById(R.id.delete_button);
+
+        intent = getIntent();
+        String nameExtra = intent.getStringExtra(SampleMaterialActivity.EXTRA_NAME);
+        String initialExtra = intent.getStringExtra(SampleMaterialActivity.EXTRA_INITIAL);
+        int colorExtra = intent.getIntExtra(SampleMaterialActivity.EXTRA_COLOR, 0);
+
+        nameEditText.setText(nameExtra);
+        nameEditText.setSelection(nameEditText.getText().length());
+        initialTextView.setText(initialExtra);
+        initialTextView.setBackgroundColor(colorExtra);
+
+        nameEditText.addTextChangedListener(new TextWatcher() {
+            @Override
+            public void onTextChanged(CharSequence s, int start, int before, int count) {
+                if (s.length() == 0) {
+                    // update initialTextView
+                    initialTextView.setText("");
+                } else if (s.length() >= 1) {
+                    // initialTextView set to first letter of nameEditText and update name stringExtra
+                    initialTextView.setText(String.valueOf(s.charAt(0)));
+                    intent.putExtra(SampleMaterialActivity.EXTRA_UPDATE, true);
+                }
+            }
+
+            @Override
+            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+            }
+
+            @Override
+            public void afterTextChanged(Editable s) {
+            }
+        });
+
+        update_button.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                // must not be zero otherwise do not finish activity and report Toast message
+                String text = initialTextView.getText().toString().trim();
+                if (TextUtils.isEmpty(text)) {
+                    Toast.makeText(getApplicationContext(), "Enter a valid name", Toast.LENGTH_SHORT).show();
+                } else {
+                    intent.putExtra(SampleMaterialActivity.EXTRA_UPDATE, true);
+                    intent.putExtra(SampleMaterialActivity.EXTRA_NAME, String.valueOf(nameEditText.getText()));
+                    intent.putExtra(SampleMaterialActivity.EXTRA_INITIAL, String.valueOf(nameEditText.getText().charAt(0)));
+                    setResult(RESULT_OK, intent);
+                    supportFinishAfterTransition();
+                }
+            }
+        });
+
+        delete_button.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                intent.putExtra(SampleMaterialActivity.EXTRA_DELETE, true);
+                setResult(RESULT_OK, intent);
+                supportFinishAfterTransition();
+            }
+        });
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle action bar item clicks here. The action bar will
+        // automatically handle clicks on the Home/Up button, so long
+        // as you specify a parent activity in AndroidManifest.xml.
+        int id = item.getItemId();
+
+        //noinspection SimplifiableIfStatement
+        if (id == android.R.id.home) {
+            super.onBackPressed();
+            return true;
+        }
+
+        return super.onOptionsItemSelected(item);
+    }
+}
